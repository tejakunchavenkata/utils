SEM_DESTROY(3)											 Linux Programmer's Manual										     SEM_DESTROY(3)



NAME
       sem_destroy - destroy an unnamed semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_destroy(sem_t *sem);

       Link with -lrt or -pthread.

DESCRIPTION
       sem_destroy() destroys the unnamed semaphore at the address pointed to by sem.

       Only a semaphore that has been initialized by sem_init(3) should be destroyed using sem_destroy().

       Destroying a semaphore that other processes or threads are currently blocked on (in sem_wait(3)) produces undefined behavior.

       Using a semaphore that has been destroyed produces undefined results, until the semaphore has been reinitialized using sem_init(3).

RETURN VALUE
       sem_destroy() returns 0 on success; on error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EINVAL sem is not a valid semaphore.

CONFORMING TO
       POSIX.1-2001.

NOTES
       An unnamed semaphore should be destroyed with sem_destroy() before the memory in which it is located is deallocated.  Failure to do this can result in resource leaks on some implementations.

SEE ALSO
       sem_init(3), sem_post(3), sem_wait(3), sem_overview(7)

COLOPHON
       This page is part of release 3.35 of the Linux man-pages project.  A description of the project, and information about reporting bugs, can be found at http://man7.org/linux/man-pages/.



Linux													 2006-03-25											     SEM_DESTROY(3)
SEM_DESTROY(P)											 POSIX Programmer's Manual										     SEM_DESTROY(P)



NAME
       sem_destroy - destroy an unnamed semaphore (REALTIME)

SYNOPSIS
       #include <semaphore.h>

       int sem_destroy(sem_t *sem);


DESCRIPTION
       The sem_destroy() function shall destroy the unnamed semaphore indicated by sem. Only a semaphore that was created using sem_init() may be destroyed using sem_destroy(); the effect of calling sem_destroy() with a
       named semaphore is undefined. The effect of subsequent use of the semaphore sem is undefined until sem is reinitialized by another call to sem_init().

       It is safe to destroy an initialized semaphore upon which no threads are currently blocked. The effect of destroying a semaphore upon which other threads are currently blocked is undefined.

RETURN VALUE
       Upon successful completion, a value of zero shall be returned. Otherwise, a value of -1 shall be returned and errno set to indicate the error.

ERRORS
       The sem_destroy() function shall fail if:

       EINVAL The sem argument is not a valid semaphore.


       The sem_destroy() function may fail if:

       EBUSY  There are currently processes blocked on the semaphore.


       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The sem_destroy() function is part of the Semaphores option and need not be available on all implementations.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       semctl() , semget() , semop() , sem_init() , sem_open() , the Base Definitions volume of IEEE Std 1003.1-2001, <semaphore.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The  Open	Group  Base
       Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between this version and the original IEEE and The
       Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html .



IEEE/The Open Group											    2003											     SEM_DESTROY(P)
